#include<cstdio>
#include<algorithm>
using namespace std;
const int inf=~0U>>1;
struct node
{
	int key,size;
	node*c[2];
	node(int _key,int _size,node*_c)
	:key(_key),size(_size)
	{c[0]=c[1]=_c;}
	void rz(){size=c[0]->size+c[1]->size+1;}
}TNull(0,0,0),*Null=&TNull;
class SBT
{
	node*root;
	int top;
	void rot(node*&t,bool d)
	{
		node*p=t->c[d];
		t->c[d]=p->c[!d];
		p->c[!d]=t;
		t->rz();p->rz();
		t=p;
	}
	void maintain(node*&t,bool d)
	{
		if(t==Null) return;
		node*p=t->c[d];
		if(p->c[d]->size>t->c[!d]->size)
			rot(t,d);
		else if(p->c[!d]->size>t->c[!d]->size)
			{
				rot(p,!d);
				rot(t,d);			
			}
		else return;
		maintain(t->c[0],0);
		maintain(t->c[1],1);
		maintain(t,0);
		maintain(t,1);
	}
	void insert(node*&t,int x)
	{
		if(t==Null) 
		{t=new node(x,1,Null);return;}
		if(t->key==x) return;
		bool d=x>t->key;
		insert(t->c[d],x);
		maintain(t,d);
		t->rz();
	}
	void remove(node*&t,int x)
	{
		if(t==Null) return;
		int d;
		if(t->key==x)
		{
			if(t->c[1]==Null)
			{delete t;t=t->c[0];return;}
			if(t->c[0]==Null)
			{delete t;t=t->c[1];return;}
			node*p=t->c[1];while(p->c[0]!=Null)p=p->c[0];
			t->key=p->key;
			remove(t->c[1],p->key);d=1;
		}
		else
		{
			d=x>t->key;
			remove(t->c[d],x);
		}
		maintain(t,1-d);
		t->rz();
	}
	int select(node*t,int k)
	{
		int r=t->c[0]->size;
		if(k==r) return t->key;
		if(k<r) return select(t->c[0],k);
		return select(t->c[1],k-r-1);
	}
	int rank(node*t,int x)
	{
		int r=t->c[0]->size;
		if(x==t->key) return r;
		if(x<t->key) return rank(t->c[0],x);
		return r+1+rank(t->c[1],x); 
	}
	public:
	SBT()
	{
		Null->c[0]=Null->c[1]=Null;
	 	root=Null;
	}
	void Insert(int x)
	{
		insert(root,x);
	}
	void Remove(int x)
	{
		remove(root,x);
	}
	int Select(int k)
	{
		if(k>root->size) return inf;
		return select(root,k-1);
	}
	int Rank(int x)
	{
		return rank(root,x);
	}
	int size(){return root->size;}
};
int main()
{
	int n,x,tmp;scanf("%d\n",&n);
	char t;SBT*T=new SBT;
	for(int i=0;i<n;i++)
	{
		scanf("%c %d\n",&t,&x);
		switch(t)
		{
			case 'I':T->Insert(x);break;
			case 'D':T->Remove(x);break;
			case 'K':tmp=T->Select(x);
						if(tmp==inf) printf("invalid\n");
						else printf("%d\n",tmp);break;
			case 'C':printf("%d\n",T->Rank(x));break;
		}
	}
}

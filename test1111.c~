#include <stdio.h>
#include <string.h>
#define maxn 200000

struct node
{
	int l, r;
	int max;
}a[4*maxn+5];

int Max(int x,  int y)
{
	return x> y? x:y;
}

void Build(int l, int r, int n)
{
	a[n].l= l;
	a[n].r= r;
	a[n].max= 0;
	if(l == r)
		return;
	int mid= (a[n].l + a[n].r)/ 2;
	Build(l, mid, 2*n);
	Build(mid+1, r, 2*n+1);	
}

void Add(int v, int num, int n)
{
//	printf("%d %d %d %d %d\n",v, num, n, a[n].l, a[n].r);
	if(v == a[n].l && v == a[n].r)
	{
	//	printf("   %d\n", v);
		a[n].max= num;
		return;
	}
	int mid= (a[n].l + a[n].r)/ 2;
	if(v<= mid)
		Add(v, num, 2*n);
	else
		Add(v, num, 2*n+1);
	a[n].max= Max(a[2*n].max, a[2*n+1].max);				
}

int Qmax(int l, int r, int n)
{
	if(a[n].l == l && a[n].r == r)
		return a[n].max;
	int mid= (a[n].l + a[n].r)/ 2;
	if(r<= mid)
		return Qmax(l, r, 2*n);
	else if(l> mid)
		return Qmax(l, r, 2*n+1);
	else
		return Max(Qmax(l, mid, 2*n), Qmax(mid+1, r, 2*n+1));			
}

int main()
{
	int n, m;
	while(scanf("%d %d",&n,&m)!=EOF)
	{
		Build(1, n, 1);
		int hehe;
		for(int i= 1; i<= n; i++)
		{
			scanf("%d",&hehe);
			Add(i, hehe, 1);

		}
		char ch;
		int v, num;
		while(m--)
		{
			
			scanf("%c %d %d",&ch,&v, &num);
			if(ch=='Q')
				printf("%d\n",Qmax(v, num, 1));
			else if(ch == 'U')
			{
				Add(v, num, 1);	
			//	printf("%d\n",Qmax(v, v, 1) );
			}
		}
	}
	return 0;
}

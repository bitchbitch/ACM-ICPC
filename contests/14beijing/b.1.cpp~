#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#define MAX 100005
int a[MAX];
int ans = 0 ;
int L(int  c)
{
  return  c << 1;
}
int R(int c)
{
   return (c <<1) | 1;
}
struct node
{
   int left , right ,mid;
   double mx;
   int mxsite;
}tree[MAX * 4];
struct node1{
  double x,y;
}nd[100005];
void up(int c)
{
   if(tree[L(c)].mx > tree[R(c)].mx)
   {
       tree[c].mx = tree[L(c)].mx;
	   tree[c].mxsite = tree[L(c)].mxsote;
   }else{
       tree[c].mx = tree[R(c)].mx;
	   tree[c].mxsite = tree[R(c)].mxsite;
   }
}
void build(int c, int p , int v )
{
    tree[c].left = p ;
    tree[c].right = v;
    tree[c].mid = (p + v ) << 1;
    if(p == v )
    {
        tree[c].sum = a[p];
        tree[c].mxsite = p ; 
		return ;
    }
    build(L(c),p,tree[c].mid);
    build(R(c),tree[c].mid+1,v);
    up(c);
}
void update(int c, int p, int value)
{
     if(tree[c].left == p  && tree[c].right == p)
     {
         tree[c].sum += value;
         return ;
     }
     if(p <= tree[c].mid)
     {
       update(L(c),p,value);
     }
     else
        update(R(c),p,value);
     up(c);
}
bool cmp(node1 x , node1 y)
{
     return x.x < x.y;
}
int main()
{
    int t ;
    scanf("%d",&t);
    for(int CASE = 1; CASE <= t ;  CASE ++)
    {
       int n ;
       scanf("%d",&n);
       for(int i = 1;i <= n;i ++)
	   {
	      scanf("%lf %lf",&nd[i].x,&nd[i].y);  
	   }
	   sort(nd+1,nd+1+n,cmp);
	   build(1,1,n);   
    
    
	}
    return 0 ;
}
